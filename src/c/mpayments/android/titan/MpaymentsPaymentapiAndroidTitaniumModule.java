/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package c.mpayments.android.titan;

import java.util.HashMap;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import c.mpayments.android.BillingActivity;
import c.mpayments.android.PurchaseListener;
import c.mpayments.android.PurchaseManager;
import c.mpayments.android.PurchaseRequest;
import c.mpayments.android.PurchaseResponse;
import c.mpayments.android.util.Logger;

@Kroll.module(name = "MpaymentsPaymentapiAndroidTitanium", id = "c.mpayments.android.titan")
public class MpaymentsPaymentapiAndroidTitaniumModule extends KrollModule {
	private static final String TAG = "MpaymentsPaymentapiAndroidTitaniumModule";

	public MpaymentsPaymentapiAndroidTitaniumModule() {
		super();
	}
/*
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(TAG, "inside onAppCreate");
	}
*/
	@Kroll.method
	public void setDebugModeEnabled(@Kroll.argument(name = "debugModeEnabled", optional = false) Boolean debugModeEnabled) {
		Logger.setDebugModeEnabled(debugModeEnabled);
	}

	@Kroll.method
	public void setPendingTransactionHandlingEnabled(
			@Kroll.argument(name = "pendingTransactionHandlingEnabled", optional = false) Boolean pendingTransactionHandlingEnabled) {
		PurchaseManager.setPendingTransactionHandlingEnabled(pendingTransactionHandlingEnabled);
	}

	@Kroll.method
	public void startPurchase(@Kroll.argument(name = "purchaseRequest", optional=false) HashMap args) {
		HashMap<String, String> arguments = (HashMap<String, String>) args;
		
		String apiKey = arguments.get("apiKey");
		/*
		 if (null == apiKey || apiKey.trim() == "")
		 	return;
		*/
		PurchaseRequest pr = new PurchaseRequest(apiKey);
		updatePurchaseRequestWithArguments(pr, arguments);

		BillingActivity.mcc = "220";
		BillingActivity.mnc = "01";
		
		PurchaseManager.attachPurchaseListener(new PurchaseListener() {
			@Override
			public void onPurchaseSuccess(PurchaseResponse arg0) {
				HashMap<String, String> data = getHashMapFromPurchaseResponse(arg0);
				fireEvent("onPurchaseSuccess", data);
			}

			@Override
			public void onPurchasePending(PurchaseResponse arg0) {
				HashMap<String, String> data = getHashMapFromPurchaseResponse(arg0);
				fireEvent("onPurchasePending", data);
			}

			@Override
			public void onPurchaseFailed(PurchaseResponse arg0) {
				HashMap<String, String> data = getHashMapFromPurchaseResponse(arg0);
				fireEvent("onPurchaseFailed", data);
			}

			@Override
			public void onPurchaseCanceled(PurchaseResponse arg0) {
				HashMap<String, String> data = getHashMapFromPurchaseResponse(arg0);
				fireEvent("onPurchaseCancelled", data);
			}
		});
		
		PurchaseManager.startPurchase(pr, this.getActivity());
	}
	
	private HashMap<String, String> getHashMapFromPurchaseResponse(
			PurchaseResponse response) {
		HashMap<String, String> data = new HashMap<String, String>();
		data.put("apiKey", response.getApiKey());
		data.put("clientId", response.getClientId());
		data.put("transactionId", response.getTransactionId());
		data.put("errorMessage", response.getErrorMessage());
		data.put("itemName", response.getItemName());
		data.put("currency", response.getCurrency());
		data.put("itemAmount", Integer.toString(response.getItemAmount()));
		data.put("price", Double.toString(response.getPrice()));
		return data;
	}

	private void updatePurchaseRequestWithArguments(PurchaseRequest pr,
			HashMap<String, String> arguments) {
		String clientId = arguments.get("clientId");
		String info = arguments.get("info");
		String testMode = arguments.get("testMode");
		String itemName = arguments.get("itemName");
		String offlineMode = arguments.get("offlineMode");
		String price = arguments.get("price");
		String titleString = arguments.get("titleString");
		String packageIndex = arguments.get("packageIndex");
		if (null != clientId && clientId.trim() != "") {
			pr.setClientId(clientId);
		}
		if (null != info && info.trim() != "") {
			pr.setInfo(info);
		}
		if (null != testMode && testMode.trim() != "") {
			pr.setTestModeEnabled(Boolean.parseBoolean(testMode.trim()));
		}
		if (null != itemName && itemName.trim() != "") {
			pr.setItemName(itemName);
		}
		if (null != price && price.trim() != "") {
			pr.setPrice(Double.parseDouble(price.trim()));
		}
		if (null != titleString && titleString.trim() != "") {
			pr.setTitleString(titleString.trim());
		}
		if (null != offlineMode && offlineMode.trim() != "") {
			pr.setOfflineModeEnabled(Boolean.parseBoolean(offlineMode.trim()));
		}
		if (null != packageIndex && packageIndex.trim() != "") {
			pr.setPackageIndex(Integer.parseInt(packageIndex.trim()));
		}
	}
}
